<?xml version="1.0" encoding="UTF-8"?>
<modification>
    <id>Wap</id>
    <version>1</version>
    <vqmver>2.4.1</vqmver>
    <author>Wang</author>
	
	<file name="catalog/controller/common/home.php">
		<operation>
			<search position="replace"><![CDATA[$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/common/home.tpl', $data));]]></search>
			<add trim="true"><![CDATA[

            if(IS_MOBILE){
                $this->response->setOutput($this->load->view('wap/home.tpl', $data));
			}else{
				$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/common/home.tpl', $data));
			}
			]]></add>
		</operation>
    </file>
	
	<file name="catalog/controller/product/search.php">
		<operation>
			<search position="replace"><![CDATA[$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/product/search.tpl', $data));]]></search>
			<add trim="true"><![CDATA[

            if(IS_MOBILE){
                $this->response->setOutput($this->load->view('wap/search.tpl', $data));
			}else{
				$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/product/search.tpl', $data));
			}
			]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$image = $this->model_tool_image->resize($result['image'], $this->config->get('config_image_product_width'), $this->config->get('config_image_product_height'));]]></search>
			<add><![CDATA[
			if(IS_MOBILE){
				$image = $this->model_tool_image->resize($result['image'], $this->config->get('config_image_thumb_width'), $this->config->get('config_image_thumb_height'));
			}else{
				$image = $this->model_tool_image->resize($result['image'], $this->config->get('config_image_product_width'), $this->config->get('config_image_product_height'));
			}
			]]></add>
		</operation>
    </file>
	
	<file name="catalog/controller/information/contact.php">
		<operation>
			<search position="replace"><![CDATA[$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/information/contact.tpl', $data));]]></search>
			<add><![CDATA[
			if(IS_MOBILE){
			$this->response->setOutput($this->load->view('wap/contact.tpl', $data));
			}else{
			$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/information/contact.tpl', $data));
			}
			
			]]></add>
		</operation>
	</file>

    <file name="catalog/controller/common/header.php">
		<operation>
			<search position="before"><![CDATA[return $this->load->view($this->config->get('config_template') . '/template/common/header.tpl', $data);]]></search>
			<add trim="true"><![CDATA[

            if(IS_MOBILE){
                return $this->load->view('wap/header.tpl', $data);
            }

			]]></add>
		</operation>

    </file>
	
	<file name="catalog/controller/common/footer.php">
		<operation>
			<search position="before"><![CDATA[if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/common/footer.tpl')) {]]></search>
			<add trim="true"><![CDATA[

            if(IS_MOBILE){
                return $this->load->view('wap/footer.tpl', $data);
            }

			]]></add>
		</operation>

    </file>
	
	<file name="catalog/controller/common/cart.php">
		<operation>
			<search position="before"><![CDATA[public function index()]]></search>
			<add><![CDATA[
			
			public function getCount(){
		$count['total']=0;
		
		if($this->cart->hasProducts()){
		$count['total'] = $this->cart->countProducts();
		}
		
		
		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($count));
			}		

	public function update() {
		$this->load->language('checkout/cart');

		$json = array();

		// Update
		if (!empty($this->request->post['quantity']) && !empty($this->request->post['key'])) {
			$this->cart->update($this->request->post['key'], $this->request->post['quantity']);

			unset($this->session->data['shipping_method']);
			unset($this->session->data['shipping_methods']);
			unset($this->session->data['payment_method']);
			unset($this->session->data['payment_methods']);
			unset($this->session->data['reward']);
		}

		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
	}
public function get_cart()
    {
        $this->load->language('api/cart');

        $json = array();

        // Stock
        if (!$this->cart->hasStock() && (!$this->config->get('config_stock_checkout') || $this->config->get('config_stock_warning'))) {
            $json['error']['stock'] = $this->language->get('error_stock');
        }

        // Products
        $json['products'] = array();

        $products = $this->cart->getProducts();

        $this->load->model('tool/image');

        foreach ($products as $product) {
            $product_total = 0;

            if ($product['image']) {
                $image = $this->model_tool_image->resize($product['image'], 80, 80);
            } else {
                $image = $this->model_tool_image->resize('image/placeholder.png', 80, 80);;
            }

            foreach ($products as $product_2) {
                if ($product_2['product_id'] == $product['product_id']) {
                    $product_total += $product_2['quantity'];
                }
            }

            if ($product['minimum'] > $product_total) {
                $json['error']['minimum'][] = sprintf($this->language->get('error_minimum'), $product['name'], $product['minimum']);
            }

            $option_data = array();

            foreach ($product['option'] as $option) {
                $option_data[] = array(
                    'product_option_id' => $option['product_option_id'],
                    'product_option_value_id' => $option['product_option_value_id'],
                    'name' => $option['name'],
                    'value' => $option['value'],
                    'type' => $option['type']
                );
            }

            $json['products'][] = array(
                'cart_id' => $product['cart_id'],
                'thumb' => $image,
                'href'      => $this->url->link('product/product', 'product_id=' . $product['product_id']),
                'product_id' => $product['product_id'],
                'name' => $product['name'],
                'model' => $product['model'],
                'option' => $option_data,
                'quantity' => $product['quantity'],
                'stock' => $product['stock'] ? true : !(!$this->config->get('config_stock_checkout') || $this->config->get('config_stock_warning')),
                'shipping' => $product['shipping'],
                'price' => $this->currency->format($this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax'))),
                'total' => $this->currency->format($this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax')) * $product['quantity']),
                'reward' => $product['reward']
            );
        }

        // Voucher
        $json['vouchers'] = array();

        if (!empty($this->session->data['vouchers'])) {
            foreach ($this->session->data['vouchers'] as $key => $voucher) {
                $json['vouchers'][] = array(
                    'code' => $voucher['code'],
                    'description' => $voucher['description'],
                    'from_name' => $voucher['from_name'],
                    'from_email' => $voucher['from_email'],
                    'to_name' => $voucher['to_name'],
                    'to_email' => $voucher['to_email'],
                    'voucher_theme_id' => $voucher['voucher_theme_id'],
                    'message' => $voucher['message'],
                    'amount' => $this->currency->format($voucher['amount'])
                );
            }
        }

        // Totals
        $this->load->model('extension/extension');

        $total_data = array();
        $total = 0;
        $taxes = $this->cart->getTaxes();

        $sort_order = array();

        $results = $this->model_extension_extension->getExtensions('total');

        foreach ($results as $key => $value) {
            $sort_order[$key] = $this->config->get($value['code'] . '_sort_order');
        }

        array_multisort($sort_order, SORT_ASC, $results);

        foreach ($results as $result) {
            if ($this->config->get($result['code'] . '_status')) {
                $this->load->model('total/' . $result['code']);

                $this->{'model_total_' . $result['code']}->getTotal($total_data, $total, $taxes);
            }
        }

        $sort_order = array();

        foreach ($total_data as $key => $value) {
            $sort_order[$key] = $value['sort_order'];
        }

        array_multisort($sort_order, SORT_ASC, $total_data);

        $json['totals'] = array();

        foreach ($total_data as $total) {
            $json['totals'][] = array(
                'title' => $total['title'],
                'text' => $this->currency->format($total['value'])
            );
        }


        $json['total'] = array_pop($json['totals'])['text'];



        if (isset($this->request->server['HTTP_ORIGIN'])) {
            $this->response->addHeader('Access-Control-Allow-Origin: ' . $this->request->server['HTTP_ORIGIN']);
            $this->response->addHeader('Access-Control-Allow-Methods: GET, PUT, POST, DELETE, OPTIONS');
            $this->response->addHeader('Access-Control-Max-Age: 1000');
            $this->response->addHeader('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With');
        }

        if(!empty($json['products'])){
            $json['state'] = 1;
        }else{
            $json['state'] = 0;
        }

        $this->response->addHeader('Content-Type: application/json');
        $this->response->setOutput(json_encode($json));


    }
]]></add>
		</operation>
	</file>
	
	<file name="catalog/controller/module/slideshow.php">
		<operation>
			<search position="before"><![CDATA[if (file_exists(DIR_TEMPLATE . $this->config->get('config_template')]]></search>
			<add trim="true"><![CDATA[

            if(IS_MOBILE){
                return $this->load->view('wap/slideshow.tpl', $data);
            }

			]]></add>
		</operation>

    </file>

	<file name="catalog/controller/account/login.php">
		<operation>
			<search position="replace"><![CDATA[$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/account/login.tpl', $data));]]></search>
			<add trim="true"><![CDATA[

            if(IS_MOBILE){
                $this->response->setOutput($this->load->view('wap/login.tpl', $data));
            }else{
            $this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/account/login.tpl', $data));
            }

			]]></add>
		</operation>

	</file>

	<file name="catalog/controller/account/register.php">
		<operation>
			<search position="replace"><![CDATA[$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/account/register.tpl', $data));]]></search>
			<add trim="true"><![CDATA[

            if(IS_MOBILE){
                $this->response->setOutput($this->load->view('wap/register.tpl', $data));
            }else{
            $this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/account/register.tpl', $data));
            }

			]]></add>
		</operation>

	</file>
	
	<file name="catalog/controller/module/butopbanner.php">
		<operation>
			<search position="before"><![CDATA[if (file_exists(DIR_TEMPLATE . $this->config->get('config_template')]]></search>
			<add trim="true"><![CDATA[

            if(IS_MOBILE){
                return $this->load->view('wap/butopbanner.tpl', $data);
            }

			]]></add>
		</operation>

    </file>
	
	<file name="catalog/controller/product/category.php">
		<operation>
			<search position="replace" index="1"><![CDATA[$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/product/category.tpl', $data));]]></search>
			<add trim="true"><![CDATA[

            if(IS_MOBILE){
				$this->response->setOutput($this->load->view('wap/category.tpl', $data));
			}else{
				$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/product/category.tpl', $data));
			}

			]]></add>
		</operation>
		
		<operation>
			<search position="replace"><![CDATA[$image = $this->model_tool_image->resize($result['image'], $this->config->get('config_image_product_width'), $this->config->get('config_image_product_height'));]]></search>
			<add><![CDATA[
			if(IS_MOBILE){
				$image = $this->model_tool_image->resize($result['image'], $this->config->get('config_image_thumb_width'), $this->config->get('config_image_thumb_height'));
			}else{
				$image = $this->model_tool_image->resize($result['image'], $this->config->get('config_image_product_width'), $this->config->get('config_image_product_height'));
			}
			]]></add>
		</operation>
		
		<operation>
			<search position="after"><![CDATA[$category_info = $this->model_catalog_category->getCategory($category_id);]]></search>
			<add><![CDATA[$data['category_id'] = $category_id;]]></add>
		</operation>
		
		<operation>
			<search position="before"><![CDATA[public function index() {]]></search>
			<add><![CDATA[
public function down(){
	$this->load->language('product/category');
	$data['json'] = array();
	
		if (isset($this->request->get['filter'])) {
			$filter = $this->request->get['filter'];
		} else {
			$filter = '';
		}

		if (isset($this->request->get['sort'])) {
			$sort = $this->request->get['sort'];
		} else {
			$sort = 'p.sort_order';
		}

		if (isset($this->request->get['order'])) {
			$order = $this->request->get['order'];
		} else {
			$order = 'ASC';
		}

		if (isset($this->request->get['page'])) {
			$page = $this->request->get['page'];
		} else {
			$page = 1;
		}

		if (isset($this->request->get['limit'])) {
			$limit = (int)$this->request->get['limit'];
		} else {
			$limit = $this->config->get('config_product_limit');
		}

		if (isset($this->request->get['page'])) {
			$page = $this->request->get['page'];
		} 
		
		if (isset($this->request->get['child_id'])) {
			$category_id = $this->request->get['child_id'];
		} 
		
		if (isset($this->request->get['child_id']) && isset($this->request->get['page'])) {
			$this->load->model('catalog/product');
			$this->load->model('tool/image');
			
			$filter_data = array(
				'filter_category_id' => $category_id,
				'filter_sub_category' => true,
				'filter_filter'      => $filter,
				'sort'               => $sort,
				'order'              => $order,
				'start'              => ($page - 1) * $limit,
				'limit'              => $limit
			);

			$product_total = $this->model_catalog_product->getTotalProducts($filter_data);

			$results = $this->model_catalog_product->getProducts($filter_data);

			foreach ($results as $result) {
				if ($result['image']) {
					$image = $this->model_tool_image->resize($result['image'], $this->config->get('config_image_thumb_width'), $this->config->get('config_image_thumb_height'));
				} else {
					$image = $this->model_tool_image->resize('placeholder.png', $this->config->get('config_image_thumb_width'), $this->config->get('config_image_thumb_height'));
				}
				
				if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
					$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')));
				} else {
					$price = false;
				}

				if ((float)$result['special']) {
					$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')));
				} else {
					$special = false;
				}

				if ($this->config->get('config_tax')) {
					$tax = $this->currency->format((float)$result['special'] ? $result['special'] : $result['price']);
				} else {
					$tax = false;
				}

				if ($this->config->get('config_review_status')) {
					$rating = (int)$result['rating'];
				} else {
					$rating = false;
				}

				$json[] = array(
					'product_id'  => $result['product_id'],
					'thumb'       => $image,
					'name'        => $result['name'],
					'price'       => $price,
					'special'     => $special,
					'tax'         => $tax,
					'minimum'     => $result['minimum'] > 0 ? $result['minimum'] : 1,
					'rating'      => $result['rating'],
					'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id'])
				);
			}
			
		}
		
		if(empty($json)){
			$json['error'] = $this->language->get('text_empty');
		}
		
		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
}
			]]></add>
		</operation>
	</file>
	
	<file name="catalog/controller/product/product.php">
		<operation>
			<search position="replace"><![CDATA[$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/product/product.tpl', $data));]]></search>
			<add><![CDATA[
			if(IS_MOBILE){
			$this->response->setOutput($this->load->view('wap/product.tpl', $data));
			}else{
			$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/product/product.tpl', $data));
			}

			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[public function index() {]]></search>
			<add trim="true"><![CDATA[
	public function getLastest(){
		$this->load->model('catalog/product');

		$this->load->model('tool/image');
		
		$start = $this->request->post['start'];
		
		$json = [
			'state' => 0
		];
		$products = array();

		$filter_data = array(
			'sort'  => 'p.date_added',
			'order' => 'DESC',
			'start' => $start,
			'limit' => 20
		);

		$results = $this->model_catalog_product->getProducts($filter_data);

		if ($results) {
			$width = $this->config->get('config_image_popup_width');
			$height = $this->config->get('config_image_popup_height');
			foreach ($results as $result) {
				if ($result['image']) {
					$image = $this->model_tool_image->resize($result['image'], $width, $height);
				} else {
					$image = $this->model_tool_image->resize('placeholder.png', $width, $height);
				}

				if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
					$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')));
				} else {
					$price = false;
				}

				if ((float)$result['special']) {
					$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')));
				} else {
					$special = false;
				}

				if ($this->config->get('config_tax')) {
					$tax = $this->currency->format((float)$result['special'] ? $result['special'] : $result['price']);
				} else {
					$tax = false;
				}

				if ($this->config->get('config_review_status')) {
					$rating = $result['rating'];
				} else {
					$rating = false;
				}

				$products[] = array(
					'product_id'  => $result['product_id'],
					'thumb'       => $image,
					'name'        => $result['name'],
					'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $this->config->get('config_product_description_length')) . '..',
					'price'       => $price,
					'special'     => $special,
					'tax'         => $tax,
					'rating'      => $rating,
					'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id'])
				);
			}
			$json['state'] = 1;
			$json['products'] = $products;
		}
		
		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
	}
			]]></add>
		</operation>
	</file>
	
	

</modification>